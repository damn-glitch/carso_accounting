import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import calendar
import io
import sqlite3
import json
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–£—á–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞", layout="wide")

# –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
VALID_USERS = {
    "manager1": "carso1111",
    "manager2": "carso1111",
    "manager3": "carso1111",
    "manager4": "carso1111",
    "leader": "alisher_krutoy"
}


def check_login(username, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""
    return username in VALID_USERS and VALID_USERS[username] == password


def is_leader(username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    return username == "leader"


def get_user_role(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_leader(username):
        return "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
    else:
        return "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä"


def login_form():
    """–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 10px; margin-bottom: 30px;">
        <h1 style="color: white; margin: 0;">üöó CARSO.KZ</h1>
        <h2 style="color: white; margin: 10px 0;">–£—á–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞</h2>
        <p style="color: #e0e0e0; margin: 0;">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏</p>
        <hr style="border-color: rgba(255,255,255,0.3); margin: 20px 0;">
        <p style="margin: 0; color: white; font-size: 16px;">
            üíª –°–¥–µ–ª–∞–ª <strong>–ê–ª–∏—à–µ—Ä –ë–µ–π—Å–µ–º–±–µ–∫–æ–≤</strong>, –≥–µ–Ω. –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ —É—á—Ä–µ–¥–∏—Ç–µ–ª—å Carso<br>
            üéØ –ü–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ <strong>–°–∞–Ω–∂–∞—Ä –¢—É—Ä–≥–∞–ª–∏</strong>, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä Carso<br>
            <small style="opacity: 0.8;">¬© 2025 CARSO.KZ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–º</small>
        </p>
    </div>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        with st.container():
            st.markdown("### üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

            username = st.text_input("üë§ –õ–æ–≥–∏–Ω", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (manager1-4)")
            password = st.text_input("üîí –ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

            col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
            with col_btn2:
                if st.button("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", type="primary", use_container_width=True):
                    if check_login(username, password):
                        st.session_state.authenticated = True
                        st.session_state.current_user = username
                        st.success(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
                        st.balloons()  # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
                        st.rerun()
                    else:
                        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
                        st.warning("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")

            st.markdown("---")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            st.markdown("""
            <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;">
                <h4 style="margin-top: 0;">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞</h4>
                <p><strong>–ú–µ–Ω–µ–¥–∂–µ—Ä—ã:</strong> manager1, manager2, manager3, manager4</p>
                <p><strong>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</strong> leader</p>
                <p><strong>–ü–∞—Ä–æ–ª–∏:</strong> —É –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å</p>
                <p><small>–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –≤—Ö–æ–¥–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã</small></p>
            </div>
            """, unsafe_allow_html=True)


def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    st.session_state.authenticated = False
    st.session_state.current_user = None
    st.rerun()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    login_form()
    st.stop()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω –∏ —Ü–µ–Ω
CAR_TYPES = {
    "–ì–ò–ë–†–ò–î 150–ö": 150000,
    "–ì–ò–ë–†–ò–î 250–ö": 250000,
    "–ì–ò–ë–†–ò–î 300–ö": 300000,
    "–î–í–° 70–ö": 70000,
    "–ë–£–£ –ê–í–¢–û 50–ö": 50000
}

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –º–∞—à–∏–Ω
CAR_TYPE_COLORS = {
    "–ì–ò–ë–†–ò–î 150–ö": "4472C4",
    "–ì–ò–ë–†–ò–î 250–ö": "C5504B",
    "–ì–ò–ë–†–ò–î 300–ö": "70AD47",
    "–î–í–° 70–ö": "FFC000",
    "–ë–£–£ –ê–í–¢–û 50–ö": "7030A0"
}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
DEFAULT_DEALERSHIPS = [
    "EL MOTORS",
    "LID CAR",
    "URBAN AUTO",
    "SAKURA MOTORS",
    "DREAM CAR",
    "NEW CAR/BOSS CAR",
    "CARMAX",
    "LYNG GO",
    "REAL AUTO ALMATY",
    "BOSSCAR",
    "GALAXY AVTO CENTER",
    "AST MOTORS",
    "ARB KAZAKHSTAN",
    "LYNK&CO AUTOINVEST",
    "ALMATY AUTO MOTORS",
    "HALYK AUTO",
    "–°–û–û–†–£–ñ–ï–ù–ò–ï",
    "EV MASTER",
    "CHANGAN AUTO ALMATY",
    "DREAM CAR MARKET",
    "MIX AUTO",
    "MIR AUTO",
    "RAMADA AUTOMARKET",
    "SILK ROAD AUTO",
    "AVTOSHOPPING02",
    "CHINACARS",
    "ES MOTORS",
    "Q4TULPAR",
    "AVTOMARKET",
    "UCAR",
    "AUTO_CENTER_KZ",
    "ZENITH AUTO & DETAILING",
    "REGIONAUTOKZ"
]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# @st.cache_resource
# def init_database():
#     conn = sqlite3.connect('carso_dealership.db', check_same_thread=False)
#     cursor = conn.cursor()

#     # –¢–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤
#     cursor.execute('''
#                    CREATE TABLE IF NOT EXISTS dealerships
#                    (
#                        id
#                        INTEGER
#                        PRIMARY
#                        KEY
#                        AUTOINCREMENT,
#                        name
#                        TEXT
#                        UNIQUE
#                        NOT
#                        NULL,
#                        created_at
#                        TIMESTAMP
#                        DEFAULT
#                        CURRENT_TIMESTAMP
#                    )
#                    ''')

#     # –¢–∞–±–ª–∏—Ü–∞ –º–∞—à–∏–Ω
#     cursor.execute('''
#                    CREATE TABLE IF NOT EXISTS cars
#                    (
#                        id
#                        INTEGER
#                        PRIMARY
#                        KEY
#                        AUTOINCREMENT,
#                        dealership_id
#                        INTEGER,
#                        car_type
#                        TEXT
#                        NOT
#                        NULL,
#                        count
#                        INTEGER
#                        NOT
#                        NULL,
#                        price_per_car
#                        INTEGER
#                        NOT
#                        NULL,
#                        total_amount
#                        INTEGER
#                        NOT
#                        NULL,
#                        date_added
#                        DATE
#                        NOT
#                        NULL,
#                        is_paid
#                        BOOLEAN
#                        DEFAULT
#                        FALSE,
#                        payment_date
#                        DATE,
#                        created_by
#                        TEXT,
#                        updated_by
#                        TEXT,
#                        created_at
#                        TIMESTAMP
#                        DEFAULT
#                        CURRENT_TIMESTAMP,
#                        FOREIGN
#                        KEY
#                    (
#                        dealership_id
#                    ) REFERENCES dealerships
#                    (
#                        id
#                    )
#                        )
#                    ''')

#     # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î)
#     try:
#         cursor.execute('ALTER TABLE cars ADD COLUMN payment_date DATE')
#     except sqlite3.OperationalError:
#         pass

#     try:
#         cursor.execute('ALTER TABLE cars ADD COLUMN created_by TEXT')
#     except sqlite3.OperationalError:
#         pass

#     try:
#         cursor.execute('ALTER TABLE cars ADD COLUMN updated_by TEXT')
#     except sqlite3.OperationalError:
#         pass

#     # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
#     for dealership in DEFAULT_DEALERSHIPS:
#         cursor.execute('INSERT OR IGNORE INTO dealerships (name) VALUES (?)', (dealership,))

#     conn.commit()

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
#     cursor.execute('SELECT COUNT(*) FROM dealerships')
#     existing_count = cursor.fetchone()[0]

#     if existing_count < len(DEFAULT_DEALERSHIPS):
#         st.info(
#             f"–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤... –î–æ–±–∞–≤–ª–µ–Ω–æ {len(DEFAULT_DEALERSHIPS) - existing_count} –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤")

#     return conn

@st.cache_resource
def init_database():
    # –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    DB_CONNECTION_STRING = "postgresql://postgres:Eldos2812@localhost:5432/carso_dealership"
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        conn = psycopg2.connect(DB_CONNECTION_STRING)
        conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS dealerships (
                id SERIAL PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞—à–∏–Ω
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cars (
                id SERIAL PRIMARY KEY,
                dealership_id INTEGER NOT NULL,
                car_type TEXT NOT NULL,
                count INTEGER NOT NULL,
                price_per_car INTEGER NOT NULL,
                total_amount INTEGER NOT NULL,
                date_added DATE NOT NULL,
                is_paid BOOLEAN DEFAULT FALSE,
                payment_date DATE,
                created_by TEXT,
                updated_by TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (dealership_id) REFERENCES dealerships(id) ON DELETE CASCADE
            )
        ''')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤
        for dealership in DEFAULT_DEALERSHIPS:
            cursor.execute(
                sql.SQL('INSERT INTO dealerships (name) VALUES (%s) ON CONFLICT (name) DO NOTHING'),
                (dealership,)
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤
        cursor.execute('SELECT COUNT(*) FROM dealerships')
        existing_count = cursor.fetchone()[0]

        if existing_count < len(DEFAULT_DEALERSHIPS):
            st.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤... –î–æ–±–∞–≤–ª–µ–Ω–æ {len(DEFAULT_DEALERSHIPS) - existing_count} –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤")

        return conn
   
    except psycopg2.Error as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {str(e)}")
            raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_dealerships(conn):
    cursor = conn.cursor()
    cursor.execute('SELECT id, name FROM dealerships ORDER BY name')
    return cursor.fetchall()


def add_dealership(conn, name):
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO dealerships (name) VALUES (?)', (name,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False


def can_add_cars_for_dealership(conn, dealership_id, target_date):
    """–í—Å–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞—à–∏–Ω—ã –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"""
    return True


def add_car_entry(conn, dealership_id, car_type, count, date_added, is_paid=False):
    cursor = conn.cursor()
    price_per_car = CAR_TYPES[car_type]
    total_amount = price_per_car * count
    current_user = st.session_state.get('current_user', 'unknown')

    # –ï—Å–ª–∏ –º–∞—à–∏–Ω—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, —Å—Ç–∞–≤–∏–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
    payment_date = date.today() if is_paid else None
    updated_by = current_user if is_paid else None

    cursor.execute('''
                   INSERT INTO cars (dealership_id, car_type, count, price_per_car, total_amount, date_added, is_paid,
                                     payment_date, created_by, updated_by)
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                   ''', (dealership_id, car_type, count, price_per_car, total_amount, date_added, is_paid, payment_date,
                         current_user, updated_by))
    conn.commit()


def update_car_payment_status(conn, car_id, is_paid):
    cursor = conn.cursor()
    current_user = st.session_state.get('current_user', 'unknown')
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute('''
                   UPDATE cars
                   SET is_paid      = ?,
                       payment_date = ?,
                       updated_by   = ?
                   WHERE id = ?
                   ''', (is_paid, date.today() if is_paid else None, current_user, car_id))
    conn.commit()


def get_car_payment_status_for_today(conn, car_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –º–∞—à–∏–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT is_paid, payment_date
                   FROM cars
                   WHERE id = ?
                   ''', (car_id,))

    result = cursor.fetchone()
    if not result:
        return False

    is_paid, payment_date = result
    if not is_paid or not payment_date:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è
    payment_date = datetime.strptime(payment_date, '%Y-%m-%d').date()
    return payment_date == date.today()


def get_cars_by_month_dealership(conn, year, month, dealership_id=None):
    cursor = conn.cursor()
    query = '''
            SELECT c.*, d.name as dealership_name
            FROM cars c
                     JOIN dealerships d ON c.dealership_id = d.id
            WHERE strftime('%Y', c.date_added) = ? \
              AND strftime('%m', c.date_added) = ? \
            '''
    params = [str(year), f"{month:02d}"]

    if dealership_id:
        query += ' AND c.dealership_id = ?'
        params.append(dealership_id)

    query += ' ORDER BY d.name, c.date_added'
    cursor.execute(query, params)
    return cursor.fetchall()


def get_monthly_summary(conn, year, month):
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT d.name                                           as dealership_name,
                          c.car_type,
                          SUM(c.count)                                     as total_count,
                          SUM(c.total_amount)                              as total_amount,
                          SUM(CASE WHEN c.is_paid THEN c.count ELSE 0 END) as paid_count,
                          COUNT(CASE WHEN c.is_paid THEN 1 END)            as paid_entries
                   FROM cars c
                            JOIN dealerships d ON c.dealership_id = d.id
                   WHERE strftime('%Y', c.date_added) = ?
                     AND strftime('%m', c.date_added) = ?
                   GROUP BY d.id, d.name, c.car_type
                   ORDER BY d.name, c.car_type
                   ''', (str(year), f"{month:02d}"))
    return cursor.fetchall()


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞
def create_excel_report(conn, year, month):
    wb = Workbook()
    ws = wb.active
    ws.title = f"–û—Ç—á–µ—Ç {calendar.month_name[month]} {year}"

    # –°—Ç–∏–ª–∏
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
    paid_fill = PatternFill(start_color="92D050", end_color="92D050", fill_type="solid")
    unpaid_fill = PatternFill(start_color="FF6B6B", end_color="FF6B6B", fill_type="solid")
    dealership_fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")

    header_font = Font(color="FFFFFF", bold=True)
    bold_font = Font(bold=True)
    center_alignment = Alignment(horizontal="center", vertical="center")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    ws['C1'] = "–û–¢–ü–†–ê–í–õ–ï–ù –°–ß–ï–¢"
    ws['C1'].fill = unpaid_fill
    ws['C2'] = "–°–ß–ï–¢ –û–ü–õ–ê–ß–ï–ù"
    ws['C2'].fill = paid_fill

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    ws['M3'] = "–¢–ê–ë–õ–ò–¶–ê –û–¢–ß–ï–¢–ê CARSO.KZ"
    ws['M3'].font = header_font
    ws['M3'].fill = header_fill
    ws['M3'].alignment = center_alignment
    ws.merge_cells('M3:S3')

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    ws['A4'] = "–ê–í–¢–û–°–ê–õ–û–ù"
    ws['A4'].fill = dealership_fill
    ws['A4'].font = bold_font
    ws['A4'].alignment = center_alignment

    ws['B4'] = "–¢–ò–ü –ú–ê–®–ò–ù–´"
    ws['B4'].fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")
    ws['B4'].font = Font(color="FFFFFF", bold=True)
    ws['B4'].alignment = center_alignment

    # –ß–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    days_in_month = calendar.monthrange(year, month)[1]
    for day in range(1, days_in_month + 1):
        col = get_column_letter(3 + day - 1)
        ws[f'{col}4'] = day
        ws[f'{col}4'].fill = PatternFill(start_color="9BC2E6", end_color="9BC2E6", fill_type="solid")
        ws[f'{col}4'].alignment = center_alignment
        ws[f'{col}4'].font = bold_font

    # –ö–æ–ª–æ–Ω–∫–∏ –∏—Ç–æ–≥–æ–≤
    total_col = get_column_letter(3 + days_in_month)
    paid_col = get_column_letter(3 + days_in_month + 1)

    ws[f'{total_col}4'] = "–í–°–ï–ì–û"
    ws[f'{total_col}4'].fill = PatternFill(start_color="C5504B", end_color="C5504B", fill_type="solid")
    ws[f'{total_col}4'].font = Font(color="FFFFFF", bold=True)
    ws[f'{total_col}4'].alignment = center_alignment

    ws[f'{paid_col}4'] = "–û–ü–õ–ê–ß–ï–ù–û"
    ws[f'{paid_col}4'].fill = paid_fill
    ws[f'{paid_col}4'].font = Font(color="FFFFFF", bold=True)
    ws[f'{paid_col}4'].alignment = center_alignment

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    summary_data = get_monthly_summary(conn, year, month)
    current_row = 5

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º
    dealership_groups = {}
    for row in summary_data:
        dealership = row[0]
        if dealership not in dealership_groups:
            dealership_groups[dealership] = []
        dealership_groups[dealership].append(row)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for dealership, types in dealership_groups.items():
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞
        start_row = current_row
        end_row = current_row + len(types) - 1

        if len(types) > 1:
            ws.merge_cells(f'A{start_row}:A{end_row}')

        ws[f'A{start_row}'] = dealership
        ws[f'A{start_row}'].fill = dealership_fill
        ws[f'A{start_row}'].font = Font(color="FFFFFF", bold=True)
        ws[f'A{start_row}'].alignment = center_alignment

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã –º–∞—à–∏–Ω
        for car_data in types:
            _, car_type, total_count, total_amount, paid_count, _ = car_data

            # –¢–∏–ø –º–∞—à–∏–Ω—ã
            ws[f'B{current_row}'] = car_type
            car_color = CAR_TYPE_COLORS.get(car_type, "808080")
            ws[f'B{current_row}'].fill = PatternFill(start_color=car_color, end_color=car_color, fill_type="solid")
            ws[f'B{current_row}'].font = Font(color="FFFFFF", bold=True)
            ws[f'B{current_row}'].alignment = center_alignment

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            cars_by_day = get_cars_by_day(conn, year, month, dealership, car_type)
            for day, count in cars_by_day.items():
                col = get_column_letter(3 + day - 1)
                ws[f'{col}{current_row}'] = count
                ws[f'{col}{current_row}'].alignment = center_alignment

            # –ò—Ç–æ–≥–∏
            ws[f'{total_col}{current_row}'] = total_count
            ws[f'{total_col}{current_row}'].alignment = center_alignment
            ws[f'{total_col}{current_row}'].font = bold_font

            ws[f'{paid_col}{current_row}'] = paid_count
            ws[f'{paid_col}{current_row}'].alignment = center_alignment
            if paid_count == total_count and total_count > 0:
                ws[f'{paid_col}{current_row}'].fill = paid_fill
            elif paid_count > 0:
                ws[f'{paid_col}{current_row}'].fill = PatternFill(start_color="FFFF99", end_color="FFFF99",
                                                                  fill_type="solid")

            current_row += 1

        current_row += 1  # –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º–∏

    # –õ–µ–≥–µ–Ω–¥–∞ —Ç–∏–ø–æ–≤ –º–∞—à–∏–Ω
    legend_row = current_row + 2
    ws[f'A{legend_row}'] = "–õ–ï–ì–ï–ù–î–ê –¢–ò–ü–û–í –ú–ê–®–ò–ù:"
    ws[f'A{legend_row}'].font = bold_font

    legend_row += 1
    for idx, (car_type, price) in enumerate(CAR_TYPES.items()):
        col = get_column_letter(1 + idx)
        ws[f'{col}{legend_row}'] = f"{car_type} ({price:,} —Ç–≥)"
        car_color = CAR_TYPE_COLORS.get(car_type, "808080")
        ws[f'{col}{legend_row}'].fill = PatternFill(start_color=car_color, end_color=car_color, fill_type="solid")
        ws[f'{col}{legend_row}'].font = Font(color="FFFFFF", bold=True)
        ws[f'{col}{legend_row}'].alignment = center_alignment

    return wb


def get_cars_by_day(conn, year, month, dealership_name, car_type):
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT strftime('%d', c.date_added) as day,
            SUM(c.count) as total_count
                   FROM cars c
                       JOIN dealerships d
                   ON c.dealership_id = d.id
                   WHERE strftime('%Y'
                       , c.date_added) = ?
                     AND strftime('%m'
                       , c.date_added) = ?
                     AND d.name = ?
                     AND c.car_type = ?
                   GROUP BY strftime('%d', c.date_added)
                   ''', (str(year), f"{month:02d}", dealership_name, car_type))

    result = {}
    for row in cursor.fetchall():
        day = int(row[0])
        count = row[1]
        result[day] = count

    return result


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = init_database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'excel_reports' not in st.session_state:
    st.session_state.excel_reports = {}

if 'expanded_sections' not in st.session_state:
    st.session_state.expanded_sections = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
if 'view_mode' not in st.session_state:
    current_user = st.session_state.get('current_user', 'unknown')
    st.session_state.view_mode = "–ü–æ –¥–Ω—è–º" if is_leader(current_user) else "–ü–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º"

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
header_col1, header_col2, header_col3 = st.columns([2, 2, 1])

with header_col1:
    st.title("üöó –£—á–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ CARSO.KZ")

with header_col2:
    current_user = st.session_state.get('current_user', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    user_role = get_user_role(current_user)
    st.markdown(f"""
    <div style="text-align: center; padding: 20px;">
        <h4>{user_role}: {current_user}</h4>
        <p>üìÖ {date.today().strftime('%d.%m.%Y')}</p>
    </div>
    """, unsafe_allow_html=True)

with header_col3:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("üö™ –í—ã–π—Ç–∏", type="secondary", help="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
        logout()

st.divider()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    current_user = st.session_state.get('current_user', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    user_role = get_user_role(current_user)
    st.markdown(f"""
    <div style="background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin-bottom: 20px;">
        <h4 style="margin: 0;">{user_role}</h4>
        <p style="margin: 0; font-size: 14px;"><strong>{current_user}</strong></p>
        <p style="margin: 0; font-size: 12px;">–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è</p>
    </div>
    """, unsafe_allow_html=True)

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    if is_leader(current_user):
        st.header("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º–∏")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤
        total_dealerships = len(get_dealerships(conn))
        st.info(f"üìä –í—Å–µ–≥–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: **{total_dealerships}**")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)
        new_dealership = st.text_input("–ù–æ–≤—ã–π –∞–≤—Ç–æ—Å–∞–ª–æ–Ω")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–∞–ª–æ–Ω"):
            if new_dealership:
                if add_dealership(conn, new_dealership):
                    st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Å–∞–ª–æ–Ω: {new_dealership}")
                    st.rerun()
                else:
                    st.error("‚ùå –¢–∞–∫–æ–π –∞–≤—Ç–æ—Å–∞–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        st.divider()

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        st.header("üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        cursor = conn.cursor()
        cursor.execute('SELECT SUM(count), SUM(total_amount) FROM cars')
        total_stats = cursor.fetchone()

        if total_stats[0]:
            col_a1, col_a2 = st.columns(2)
            with col_a1:
                st.metric("–í—Å–µ–≥–æ –º–∞—à–∏–Ω", int(total_stats[0]))
            with col_a2:
                total_amount = int(total_stats[1])
                st.metric("–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç", f"{total_amount:,} —Ç–≥")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–∞–º
            cursor.execute('SELECT SUM(count) FROM cars WHERE is_paid = 1')
            paid_cars = cursor.fetchone()[0] or 0

            if int(total_stats[0]) > 0:
                payment_rate = (paid_cars / int(total_stats[0])) * 100
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç", f"{payment_rate:.1f}%")

        st.divider()

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        st.header("üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")

        cursor.execute('''
                       SELECT created_by,
                              COUNT(*)                                     as entries_count,
                              SUM(count)                                   as total_cars,
                              SUM(total_amount)                            as total_amount,
                              SUM(CASE WHEN is_paid THEN count ELSE 0 END) as paid_cars
                       FROM cars
                       WHERE created_by IS NOT NULL
                         AND created_by != 'unknown'
                       GROUP BY created_by
                       ORDER BY SUM (count) DESC
                       ''')
        manager_detailed_stats = cursor.fetchall()

        if manager_detailed_stats:
            for manager, entries, cars_count, total_amount, paid_cars in manager_detailed_stats:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –æ–ø–ª–∞—Ç–∞–º
                cursor.execute('SELECT SUM(count) FROM cars WHERE updated_by = ? AND is_paid = 1', (manager,))
                processed_payments = cursor.fetchone()[0] or 0

                efficiency = (paid_cars / cars_count * 100) if cars_count > 0 else 0

                with st.expander(f"üìä {manager} ({cars_count} –º–∞—à–∏–Ω)", expanded=False):
                    col_m1, col_m2, col_m3 = st.columns(3)
                    with col_m1:
                        st.metric("–ó–∞–ø–∏—Å–µ–π", entries)
                        st.metric("–ú–∞—à–∏–Ω –¥–æ–±–∞–≤–∏–ª", int(cars_count))
                    with col_m2:
                        st.metric("–ù–∞ —Å—É–º–º—É", f"{int(total_amount):,} —Ç–≥")
                        st.metric("–û–ø–ª–∞—á–µ–Ω–æ –º–∞—à–∏–Ω", f"{paid_cars}/{cars_count}")
                    with col_m3:
                        st.metric("–û–±—Ä–∞–±–æ—Ç–∞–ª –æ–ø–ª–∞—Ç", processed_payments)
                        st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", f"{efficiency:.1f}%")
        else:
            st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    else:
        st.header("–î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É")

        # –í—ã–±–æ—Ä –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞
        dealerships = get_dealerships(conn)
        dealership_dict = {name: id for id, name in dealerships}
        selected_dealership_name = st.selectbox("–ê–≤—Ç–æ—Å–∞–ª–æ–Ω", list(dealership_dict.keys()))
        selected_dealership_id = dealership_dict.get(selected_dealership_name)

        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        selected_date = st.date_input("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", value=date.today())

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã
        car_type = st.selectbox("–¢–∏–ø –º–∞—à–∏–Ω—ã", list(CAR_TYPES.keys()))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω
        car_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω", min_value=1, value=1)

        # –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        is_paid = st.checkbox("–ú–∞—à–∏–Ω—ã –æ–ø–ª–∞—á–µ–Ω—ã", value=False, help="–û—Ç–º–µ—Ç—å—Ç–µ –µ—Å–ª–∏ –º–∞—à–∏–Ω—ã —É–∂–µ –æ–ø–ª–∞—á–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–º")

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—ã"):
            add_car_entry(conn, selected_dealership_id, car_type, car_count, selected_date, is_paid)
            status = "–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö" if is_paid else "–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö"
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {car_count} {status} –º–∞—à–∏–Ω —Ç–∏–ø–∞ {car_type} –¥–ª—è {selected_dealership_name}")
            st.rerun()

        st.divider()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        st.subheader("üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        cursor = conn.cursor()
        cursor.execute('SELECT SUM(count), SUM(total_amount) FROM cars WHERE created_by = ?', (current_user,))
        user_stats = cursor.fetchone()

        if user_stats[0]:
            st.metric("–î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—à–∏–Ω", int(user_stats[0]))
            st.metric("–ù–∞ —Å—É–º–º—É", f"{int(user_stats[1]):,} —Ç–≥")
        else:
            st.info("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –º–∞—à–∏–Ω—ã")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–∞–º
        cursor.execute('SELECT SUM(count) FROM cars WHERE updated_by = ? AND is_paid = 1', (current_user,))
        user_payments = cursor.fetchone()[0] or 0

        if user_payments > 0:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø–ª–∞—Ç", f"{user_payments} –º–∞—à–∏–Ω")

    st.divider()

    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    if st.button("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", type="secondary", use_container_width=True):
        logout()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
col1, col2 = st.columns([3, 1])

with col1:
    st.header("üìä –£—á–µ—Ç –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º")

    # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    view_col1, view_col2, view_col3, view_col4 = st.columns([2, 2, 2, 1])
    with view_col1:
        view_year = st.selectbox("–ì–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", range(2023, 2030), index=2)
    with view_col2:
        view_month = st.selectbox("–ú–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", range(1, 13), index=date.today().month - 1)
    with view_col3:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ session state
        view_mode_options = ["–ü–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º", "–ü–æ –¥–Ω—è–º"]
        current_index = view_mode_options.index(st.session_state.view_mode)

        selected_mode = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", view_mode_options, index=current_index)

        # –û–±–Ω–æ–≤–ª—è–µ–º session state –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if selected_mode != st.session_state.view_mode:
            st.session_state.view_mode = selected_mode
            st.rerun()

        view_mode = st.session_state.view_mode

    with view_col4:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ", help="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ–ø–ª–∞—Ç"):
            st.rerun()

    month_name = calendar.month_name[view_month]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
    cars_data = get_cars_by_month_dealership(conn, view_year, view_month)

    if cars_data:
        st.subheader(f"üìÖ {month_name} {view_year}")

        if view_mode == "–ü–æ –¥–Ω—è–º":
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
            day_groups = {}
            for car in cars_data:
                car_date = car[6]  # date_added
                if car_date not in day_groups:
                    day_groups[car_date] = []
                day_groups[car_date].append(car)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ —Å–≤–µ—Ä—Ö—É)
            sorted_days = sorted(day_groups.keys(), reverse=True)

            for car_date in sorted_days:
                cars = day_groups[car_date]

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                date_obj = datetime.strptime(str(car_date), '%Y-%m-%d').date()
                day_name = date_obj.strftime('%d %B %Y (%A)')

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
                day_total_cars = sum(car[3] for car in cars)  # count
                day_total_amount = sum(car[5] for car in cars)  # total_amount
                day_paid_cars = sum(car[3] for car in cars if get_car_payment_status_for_today(conn, car[0]) or car[7])

                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã
                if date_obj == date.today():
                    bg_color = "#e8f5e8"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
                    day_emoji = "üìÖ"
                elif date_obj == date.today() - timedelta(days=1):
                    bg_color = "#fff3e0"  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—á–µ—Ä–∞
                    day_emoji = "üìã"
                else:
                    bg_color = "#f8f9fa"  # –û–±—ã—á–Ω—ã–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                    day_emoji = "üìÑ"

                with st.container():
                    st.markdown(f"""
                    <div style="background-color: {bg_color}; padding: 15px; border-radius: 10px; margin: 10px 0;">
                        <h4>{day_emoji} {day_name}</h4>
                        <p>–ú–∞—à–∏–Ω: {day_total_cars} | –°—É–º–º–∞: {day_total_amount:,} —Ç–≥ | –û–ø–ª–∞—á–µ–Ω–æ: {day_paid_cars}/{day_total_cars}</p>
                    </div>
                    """, unsafe_allow_html=True)

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è
                    day_dealership_groups = {}
                    for car in cars:
                        dealership = car[12]  # dealership_name
                        if dealership not in day_dealership_groups:
                            day_dealership_groups[dealership] = []
                        day_dealership_groups[dealership].append(car)

                    for dealership, dealership_cars in day_dealership_groups.items():
                        with st.expander(f"üè¢ {dealership} ({len(dealership_cars)} –∑–∞–ø–∏—Å–µ–π)", expanded=False):

                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—à–∏–Ω—ã
                            for car in dealership_cars:
                                car_id, dealership_id, car_type, count, price_per_car, total_amount, date_added, is_paid, payment_date, created_by, updated_by, created_at, dealership_name = car

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –∏–∑ –ë–î)
                                paid_today = get_car_payment_status_for_today(conn, car_id)

                                # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
                                if paid_today:
                                    status_color = "üü¢"
                                    status_text = f"–û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ({updated_by or 'N/A'})" if updated_by else "–û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
                                elif is_paid:
                                    status_color = "üü°"
                                    payment_info = f" ({updated_by})" if updated_by else ""
                                    status_text = f"–û–ø–ª–∞—á–µ–Ω–æ {payment_date}{payment_info}" if payment_date else f"–û–ø–ª–∞—á–µ–Ω–æ —Ä–∞–Ω–µ–µ{payment_info}"
                                else:
                                    status_color = "üî¥"
                                    status_text = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

                                car_col1, car_col2, car_col3, car_col4 = st.columns([2, 1, 1, 1])

                                with car_col1:
                                    creator_info = f" (–¥–æ–±–∞–≤–∏–ª: {created_by})" if created_by else ""
                                    st.write(f"**{car_type}** - {count} —à—Ç.{creator_info}")
                                with car_col2:
                                    st.write(f"{total_amount:,} —Ç–≥")
                                with car_col3:
                                    st.write(f"{status_color} {status_text}")
                                with car_col4:
                                    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
                                    button_key = f"payment_btn_{car_id}_{date.today()}_{car_date}"

                                    if paid_today:
                                        if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", key=f"unpay_{button_key}", type="secondary"):
                                            update_car_payment_status(conn, car_id, False)
                                            st.success("‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
                                            st.rerun()
                                    else:
                                        if st.button("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è", key=f"pay_{button_key}", type="primary"):
                                            update_car_payment_status(conn, car_id, True)
                                            st.success("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
                                            st.rerun()

        else:
            # –°—Ç–∞—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º
            dealership_groups = {}
            for car in cars_data:
                dealership = car[12]  # dealership_name
                if dealership not in dealership_groups:
                    dealership_groups[dealership] = []
                dealership_groups[dealership].append(car)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º
            for dealership, cars in dealership_groups.items():

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞
                dealership_col1, dealership_col2 = st.columns([3, 1])

                with dealership_col2:
                    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key=f"refresh_{dealership}_{view_year}_{view_month}",
                                 help="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç"):
                        st.rerun()

                with st.expander(f"üè¢ {dealership}", expanded=True):

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—à–∏–Ω—ã
                    for car in cars:
                        car_id, dealership_id, car_type, count, price_per_car, total_amount, date_added, is_paid, payment_date, created_by, updated_by, created_at, dealership_name = car

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –∏–∑ –ë–î)
                        paid_today = get_car_payment_status_for_today(conn, car_id)

                        # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
                        if paid_today:
                            status_color = "üü¢"
                            status_text = f"–û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ({updated_by or 'N/A'})" if updated_by else "–û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
                        elif is_paid:
                            status_color = "üü°"
                            payment_info = f" ({updated_by})" if updated_by else ""
                            status_text = f"–û–ø–ª–∞—á–µ–Ω–æ {payment_date}{payment_info}" if payment_date else f"–û–ø–ª–∞—á–µ–Ω–æ —Ä–∞–Ω–µ–µ{payment_info}"
                        else:
                            status_color = "üî¥"
                            status_text = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

                        car_col1, car_col2, car_col3, car_col4 = st.columns([2, 1, 1, 1])

                        with car_col1:
                            creator_info = f" (–¥–æ–±–∞–≤–∏–ª: {created_by})" if created_by else ""
                            st.write(f"**{car_type}** - {count} —à—Ç. ({date_added}){creator_info}")
                        with car_col2:
                            st.write(f"{total_amount:,} —Ç–≥")
                        with car_col3:
                            st.write(f"{status_color} {status_text}")
                        with car_col4:
                            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
                            button_key = f"payment_btn_{car_id}_{date.today()}_{view_year}_{view_month}"

                            if paid_today:
                                # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
                                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", key=f"unpay_{button_key}", type="secondary"):
                                    update_car_payment_status(conn, car_id, False)
                                    st.success("‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
                                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                                    st.rerun()
                            else:
                                # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
                                if st.button("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è", key=f"pay_{button_key}", type="primary"):
                                    update_car_payment_status(conn, car_id, True)
                                    st.success("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
                                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                                    st.rerun()

                    # –ò—Ç–æ–≥–∏ –ø–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—É
                    dealership_total = sum(car[5] for car in cars)  # total_amount
                    dealership_cars = sum(car[3] for car in cars)  # count
                    paid_cars_today = sum(car[3] for car in cars if get_car_payment_status_for_today(conn, car[0]))

                    st.markdown("---")
                    summary_col1, summary_col2, summary_col3 = st.columns(3)
                    with summary_col1:
                        st.metric("–í—Å–µ–≥–æ –º–∞—à–∏–Ω", dealership_cars)
                    with summary_col2:
                        st.metric("–û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è", f"{paid_cars_today}/{dealership_cars}")
                    with summary_col3:
                        st.metric("–°—É–º–º–∞", f"{dealership_total:,} —Ç–≥")

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.divider()

        export_col1, export_col2 = st.columns(2)

        with export_col1:
            if st.button(f"üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç Excel", key=f"create_excel_{view_year}_{view_month}"):
                wb = create_excel_report(conn, view_year, view_month)

                excel_buffer = io.BytesIO()
                wb.save(excel_buffer)
                excel_buffer.seek(0)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                st.session_state[f'excel_data_{view_year}_{view_month}'] = excel_buffer.getvalue()
                st.success("‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∞.")

        with export_col2:
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞)
            excel_key = f'excel_data_{view_year}_{view_month}'
            if excel_key in st.session_state:
                st.download_button(
                    label=f"üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç {month_name} {view_year}.xlsx",
                    data=st.session_state[excel_key],
                    file_name=f"–û—Ç—á–µ—Ç_{month_name}_{view_year}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    key=f"download_{view_year}_{view_month}"
                )
            else:
                st.button("üíæ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç", disabled=True)

    else:
        st.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {month_name} {view_year} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

with col2:
    if is_leader(current_user):
        st.header("üëë –ü–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        cursor = conn.cursor()
        cursor.execute('SELECT SUM(count), SUM(total_amount) FROM cars')
        total_stats = cursor.fetchone()

        if total_stats[0]:
            # –û—Å–Ω–æ–≤–Ω—ã–µ KPI
            st.subheader("üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

            total_cars = int(total_stats[0])
            total_revenue = int(total_stats[1])

            cursor.execute('SELECT SUM(count) FROM cars WHERE is_paid = 1')
            paid_cars = cursor.fetchone()[0] or 0

            cursor.execute('SELECT SUM(total_amount) FROM cars WHERE is_paid = 1')
            paid_revenue = cursor.fetchone()[0] or 0

            col_kpi1, col_kpi2 = st.columns(2)
            with col_kpi1:
                st.metric("üí∞ –ü–æ–ª—É—á–µ–Ω–æ", f"{paid_revenue:,} —Ç–≥")
                st.metric("üöó –û–ø–ª–∞—á–µ–Ω–æ –º–∞—à–∏–Ω", f"{paid_cars}/{total_cars}")
            with col_kpi2:
                pending_revenue = total_revenue - paid_revenue
                st.metric("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è", f"{pending_revenue:,} —Ç–≥")
                payment_rate = (paid_cars / total_cars * 100) if total_cars > 0 else 0
                st.metric("üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{payment_rate:.1f}%")

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            st.progress(payment_rate / 100, text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {payment_rate:.1f}%")

            st.divider()

            # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
            st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")

            cursor.execute('''
                           SELECT date_added,
                                  SUM(count)                                          as daily_cars,
                                  SUM(total_amount)                                   as daily_revenue,
                                  SUM(CASE WHEN is_paid THEN total_amount ELSE 0 END) as daily_paid
                           FROM cars
                           WHERE date_added >= date ('now', '-30 days')
                           GROUP BY date_added
                           ORDER BY date_added
                           ''')
            daily_data = cursor.fetchall()

            if daily_data:
                dates = [row[0] for row in daily_data]
                cars_data = [row[1] for row in daily_data]
                revenue_data = [row[2] for row in daily_data]
                paid_data = [row[3] for row in daily_data]

                # –ì—Ä–∞—Ñ–∏–∫ –º–∞—à–∏–Ω –ø–æ –¥–Ω—è–º
                chart_data = pd.DataFrame({
                    '–î–∞—Ç–∞': dates,
                    '–î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—à–∏–Ω': cars_data,
                    '–û–±–æ—Ä–æ—Ç (—Ç—ã—Å. —Ç–≥)': [x / 1000 for x in revenue_data],
                    '–ü–æ–ª—É—á–µ–Ω–æ (—Ç—ã—Å. —Ç–≥)': [x / 1000 for x in paid_data]
                })

                st.line_chart(chart_data.set_index('–î–∞—Ç–∞'))

            st.divider()

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –º–∞—à–∏–Ω
            st.subheader("üöó –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –º–∞—à–∏–Ω")

            cursor.execute('''
                           SELECT car_type,
                                  SUM(count)                                   as total_count,
                                  SUM(total_amount)                            as total_amount,
                                  SUM(CASE WHEN is_paid THEN count ELSE 0 END) as paid_count
                           FROM cars
                           GROUP BY car_type
                           ORDER BY SUM(count) DESC
                           ''')
            car_types_data = cursor.fetchall()

            if car_types_data:
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                types_chart = pd.DataFrame({
                    '–¢–∏–ø –º–∞—à–∏–Ω—ã': [row[0] for row in car_types_data],
                    '–ü—Ä–æ–¥–∞–Ω–æ': [row[1] for row in car_types_data],
                    '–û–ø–ª–∞—á–µ–Ω–æ': [row[3] for row in car_types_data]
                })

                st.bar_chart(types_chart.set_index('–¢–∏–ø –º–∞—à–∏–Ω—ã'))

                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                for car_type, total_count, total_amount, paid_count in car_types_data:
                    conversion = (paid_count / total_count * 100) if total_count > 0 else 0
                    with st.expander(f"üöô {car_type}: {total_count} —à—Ç.", expanded=False):
                        col_ct1, col_ct2, col_ct3 = st.columns(3)
                        with col_ct1:
                            st.metric("–í—Å–µ–≥–æ", total_count)
                        with col_ct2:
                            st.metric("–û–ø–ª–∞—á–µ–Ω–æ", f"{paid_count}/{total_count}")
                        with col_ct3:
                            st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{conversion:.1f}%")

            st.divider()

            # –†–µ–π—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            st.subheader("üèÜ –†–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

            cursor.execute('''
                           SELECT created_by,
                                  COUNT(*)                                            as entries_count,
                                  SUM(count)                                          as total_cars,
                                  SUM(total_amount)                                   as total_amount,
                                  SUM(CASE WHEN is_paid THEN count ELSE 0 END)        as paid_cars,
                                  SUM(CASE WHEN is_paid THEN total_amount ELSE 0 END) as paid_amount
                           FROM cars
                           WHERE created_by IS NOT NULL
                             AND created_by != 'unknown'
                           GROUP BY created_by
                           ORDER BY SUM (CASE WHEN is_paid THEN total_amount ELSE 0 END) DESC
                           ''')
            managers_rating = cursor.fetchall()

            if managers_rating:
                for i, (manager, entries, cars_count, total_amount, paid_cars, paid_amount) in enumerate(
                        managers_rating, 1):
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –æ–ø–ª–∞—Ç–∞–º
                    cursor.execute('SELECT SUM(count) FROM cars WHERE updated_by = ? AND is_paid = 1', (manager,))
                    processed_payments = cursor.fetchone()[0] or 0

                    efficiency = (paid_cars / cars_count * 100) if cars_count > 0 else 0

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å
                    if i == 1:
                        medal = "ü•á"
                    elif i == 2:
                        medal = "ü•à"
                    elif i == 3:
                        medal = "ü•â"
                    else:
                        medal = f"{i}."

                    with st.expander(f"{medal} {manager} - {paid_amount:,} —Ç–≥ –ø–æ–ª—É—á–µ–Ω–æ", expanded=False):
                        col_mr1, col_mr2, col_mr3 = st.columns(3)
                        with col_mr1:
                            st.metric("–î–æ–±–∞–≤–∏–ª", f"{cars_count} –º–∞—à–∏–Ω")
                            st.metric("–ó–∞–ø–∏—Å–µ–π", entries)
                        with col_mr2:
                            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–ª –æ–ø–ª–∞—Ç", processed_payments)
                            st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", f"{efficiency:.1f}%")
                        with col_mr3:
                            st.metric("–ü–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç", f"{paid_amount:,} —Ç–≥")
                            avg_per_car = paid_amount / paid_cars if paid_cars > 0 else 0
                            st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_per_car:,.0f} —Ç–≥")

            st.divider()

            # –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ü–µ–ª–∏
            st.subheader("üéØ –¶–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã")

            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            current_month = date.today().month
            current_year = date.today().year

            cursor.execute('''
                           SELECT SUM(count)                                          as month_cars,
                                  SUM(total_amount)                                   as month_revenue,
                                  SUM(CASE WHEN is_paid THEN total_amount ELSE 0 END) as month_paid
                           FROM cars
                           WHERE strftime('%Y', date_added) = ?
                             AND strftime('%m', date_added) = ?
                           ''', (str(current_year), f"{current_month:02d}"))

            month_stats = cursor.fetchone()

            if month_stats and month_stats[0]:
                month_cars, month_revenue, month_paid = month_stats

                # –î–Ω–∏ –ø—Ä–æ—à–ª–∏ –≤ –º–µ—Å—è—Ü–µ
                days_passed = date.today().day
                days_in_current_month = calendar.monthrange(current_year, current_month)[1]
                days_remaining = days_in_current_month - days_passed

                # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
                if days_passed > 0:
                    daily_avg_revenue = month_revenue / days_passed
                    projected_revenue = daily_avg_revenue * days_in_current_month

                    col_pr1, col_pr2 = st.columns(2)
                    with col_pr1:
                        st.metric("üìÖ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å", days_remaining)
                        st.metric("üìä –°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç/–¥–µ–Ω—å", f"{daily_avg_revenue:,.0f} —Ç–≥")
                    with col_pr2:
                        st.metric("üéØ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü", f"{projected_revenue:,.0f} —Ç–≥")
                        month_progress = (days_passed / days_in_current_month) * 100
                        st.metric("‚è∞ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–µ—Å—è—Ü–∞", f"{month_progress:.1f}%")

                # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –º–µ—Å—è—Ü–∞
                revenue_progress = (
                            month_revenue / projected_revenue * 100) if 'projected_revenue' in locals() and projected_revenue > 0 else 0
                st.progress(month_progress / 100, text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {revenue_progress:.1f}%")

            st.divider()

            # –¢–æ–ø –¥–Ω–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
            st.subheader("üî• –õ—É—á—à–∏–µ –¥–Ω–∏")

            cursor.execute('''
                           SELECT date_added,
                                  SUM(count)        as daily_cars,
                                  SUM(total_amount) as daily_revenue
                           FROM cars
                           WHERE date_added >= date ('now', '-60 days')
                           GROUP BY date_added
                           ORDER BY SUM (total_amount) DESC
                               LIMIT 5
                           ''')
            top_days = cursor.fetchall()

            if top_days:
                for i, (day_date, cars, revenue) in enumerate(top_days, 1):
                    day_name = datetime.strptime(day_date, '%Y-%m-%d').strftime('%d.%m.%Y (%A)')

                    col_td1, col_td2 = st.columns([3, 1])
                    with col_td1:
                        st.write(f"**{i}. {day_name}**")
                    with col_td2:
                        st.write(f"**{revenue:,} —Ç–≥** ({cars} –º–∞—à–∏–Ω)")

        else:
            st.info("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

    else:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã)
        st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        cursor = conn.cursor()
        cursor.execute('SELECT SUM(count), SUM(total_amount) FROM cars')
        total_stats = cursor.fetchone()

        if total_stats[0]:
            st.metric("–í—Å–µ–≥–æ –º–∞—à–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", int(total_stats[0]))
            st.metric("–û–±—â–∞—è —Å—É–º–º–∞", f"{int(total_stats[1]):,} —Ç–≥")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–∞–º
            cursor.execute('SELECT SUM(count) FROM cars WHERE is_paid = 1')
            paid_cars = cursor.fetchone()[0] or 0

            cursor.execute('SELECT SUM(total_amount) FROM cars WHERE is_paid = 1')
            paid_amount = cursor.fetchone()[0] or 0

            unpaid_cars = int(total_stats[0]) - paid_cars

            st.divider()

            # –°–¢–ê–¢–£–° –û–ü–õ–ê–¢ –ó–ê –°–ï–ì–û–î–ù–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
            st.subheader("üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç")
            st.caption(f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')})")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_str = date.today().strftime('%Y-%m-%d')

            # –ú–∞—à–∏–Ω—ã, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
                           SELECT SUM(count), SUM(total_amount)
                           FROM cars
                           WHERE payment_date = ?
                             AND is_paid = 1
                           ''', (today_str,))
            today_paid_stats = cursor.fetchone()
            today_paid_cars = today_paid_stats[0] or 0
            today_paid_amount = today_paid_stats[1] or 0

            # –ú–∞—à–∏–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
            cursor.execute('''
                           SELECT SUM(count), SUM(total_amount)
                           FROM cars
                           WHERE date_added = ?
                             AND is_paid = 0
                           ''', (today_str,))
            today_unpaid_stats = cursor.fetchone()
            today_unpaid_cars = today_unpaid_stats[0] or 0
            today_unpaid_amount = today_unpaid_stats[1] or 0

            # –í—Å–µ–≥–æ –º–∞—à–∏–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_total_cars = today_paid_cars + today_unpaid_cars
            today_total_amount = today_paid_amount + today_unpaid_amount

            if today_total_cars > 0:
                col_today1, col_today2 = st.columns(2)

                with col_today1:
                    # –û–ø–ª–∞—á–µ–Ω–æ
                    st.markdown("""
                    <div style="background-color: #d4edda; padding: 10px; border-radius: 8px; margin-bottom: 10px;">
                        <div style="display: flex; align-items: center;">
                            <span style="color: #28a745; font-size: 20px; margin-right: 8px;">‚úÖ</span>
                            <span style="color: #155724; font-weight: bold;">–û–ø–ª–∞—á–µ–Ω–æ</span>
                        </div>
                        <div style="font-size: 24px; font-weight: bold; color: #155724; margin: 5px 0;">
                            {today_paid_cars} –º–∞—à–∏–Ω
                        </div>
                        <div style="color: #6c757d; font-size: 14px;">
                            –°—É–º–º–∞ –æ–ø–ª–∞—Ç<br>
                            <span style="font-size: 18px; font-weight: bold; color: #155724;">
                                {today_paid_amount:,} —Ç–≥
                            </span>
                        </div>
                    </div>
                    """.format(today_paid_cars=today_paid_cars, today_paid_amount=today_paid_amount),
                                unsafe_allow_html=True)

                with col_today2:
                    # –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ
                    st.markdown("""
                    <div style="background-color: #f8d7da; padding: 10px; border-radius: 8px; margin-bottom: 10px;">
                        <div style="display: flex; align-items: center;">
                            <span style="color: #dc3545; font-size: 20px; margin-right: 8px;">‚ùå</span>
                            <span style="color: #721c24; font-weight: bold;">–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ</span>
                        </div>
                        <div style="font-size: 24px; font-weight: bold; color: #721c24; margin: 5px 0;">
                            {today_unpaid_cars} –º–∞—à–∏–Ω
                        </div>
                        <div style="color: #6c757d; font-size: 14px;">
                            –ö –¥–æ–ø–ª–∞—Ç–µ<br>
                            <span style="font-size: 18px; font-weight: bold; color: #721c24;">
                                {today_unpaid_amount:,} —Ç–≥
                            </span>
                        </div>
                    </div>
                    """.format(today_unpaid_cars=today_unpaid_cars, today_unpaid_amount=today_unpaid_amount),
                                unsafe_allow_html=True)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
                today_payment_percentage = (today_paid_cars / today_total_cars * 100) if today_total_cars > 0 else 0
                st.progress(today_payment_percentage / 100, text=f"–û–ø–ª–∞—á–µ–Ω–æ: {today_payment_percentage:.1f}%")

            else:
                st.info("üìã –ó–∞ —Å–µ–≥–æ–¥–Ω—è –º–∞—à–∏–Ω –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–æ—Å—å")

            st.divider()
            st.subheader("üè¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã")

            # –¢–æ–ø –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
            cursor.execute('''
                           SELECT d.name, SUM(c.count), SUM(c.total_amount)
                           FROM cars c
                                    JOIN dealerships d ON c.dealership_id = d.id
                           GROUP BY d.id, d.name
                           ORDER BY SUM(c.count) DESC LIMIT 5
                           ''')
            top_dealerships = cursor.fetchall()

            for i, (name, total_cars, total_amount) in enumerate(top_dealerships, 1):
                st.write(f"**{i}. {name}** - {total_cars} –º–∞—à–∏–Ω ({total_amount:,} —Ç–≥)")

            st.divider()
            st.subheader("üöó –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –º–∞—à–∏–Ω")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –º–∞—à–∏–Ω
            cursor.execute('''
                           SELECT car_type, SUM(count) as total_count
                           FROM cars
                           GROUP BY car_type
                           ORDER BY SUM(count) DESC LIMIT 5
                           ''')
            popular_types = cursor.fetchall()

            for i, (car_type, count) in enumerate(popular_types, 1):
                st.write(f"**{i}. {car_type}** - {count} –º–∞—à–∏–Ω")

        else:
            st.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω")

# –§—É—Ç–µ—Ä —Å –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º - —Ä–∞–∑–º–µ—â–∞–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
st.markdown("---")
st.markdown("""
<div style="
    text-align: center; 
    padding: 25px; 
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
    border-radius: 15px; 
    margin: 30px 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
">
    <p style="margin: 0; color: white; font-size: 16px;">
        üíª –°–¥–µ–ª–∞–ª <strong>–ê–ª–∏—à–µ—Ä –ë–µ–π—Å–µ–º–±–µ–∫–æ–≤</strong>, –≥–µ–Ω. –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ —É—á—Ä–µ–¥–∏—Ç–µ–ª—å Carso<br>
        üéØ –ü–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ <strong>–°–∞–Ω–∂–∞—Ä –¢—É—Ä–≥–∞–ª–∏</strong>, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä Carso<br>
        <small style="opacity: 0.8;">¬© 2025 CARSO.KZ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–º</small>
    </p>
</div>
""", unsafe_allow_html=True)

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)
if is_leader(current_user):
    st.markdown("---")
    st.subheader("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")

    # –û–±—ã—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", type="secondary", help="–û—á–∏—Å—Ç–∫–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤"):
        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö", type="primary"):
            cursor = conn.cursor()
            cursor.execute('DELETE FROM cars')
            cursor.execute('DELETE FROM dealerships')

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã
            for dealership in DEFAULT_DEALERSHIPS:
                cursor.execute('INSERT INTO dealerships (name) VALUES (?)', (dealership,))

            conn.commit()
            st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
            st.rerun()

    st.markdown("---")

    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º (–û–ü–ê–°–ù–û!)
    st.markdown("""
    <div style="background-color: #ffebee; border: 2px solid #f44336; border-radius: 8px; padding: 15px; margin: 10px 0;">
        <h4 style="color: #d32f2f; margin-top: 0;">üö® –û–ü–ê–°–ù–ê–Ø –ó–û–ù–ê</h4>
        <p style="color: #d32f2f; margin: 0;">–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</p>
    </div>
    """, unsafe_allow_html=True)

    destroy_password = st.text_input(
        "üîê –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏",
        type="password",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        help="–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"
    )

    if st.button("üí• –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•", type="primary", help="–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"):
        if destroy_password == "alisher_destroy":
            if st.button("üî• –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ü–û–õ–ù–û–ï –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï", type="primary"):
                cursor = conn.cursor()
                cursor.execute('DELETE FROM cars')
                cursor.execute('DELETE FROM dealerships')
                conn.commit()

                st.success("üíÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
                st.warning("‚ö†Ô∏è –í—Å–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã —É–¥–∞–ª–µ–Ω—ã! –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                st.rerun()
        elif destroy_password:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏!")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
